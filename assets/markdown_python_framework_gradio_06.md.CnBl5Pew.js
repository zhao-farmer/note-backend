import{_ as d,c as a,o as e,a0 as s}from"./chunks/framework.CKc0UbDI.js";const r="/note-backend/python/framework/gradio/017.png",g=JSON.parse('{"title":"六、其他","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/python/framework/gradio/06.md","filePath":"markdown/python/framework/gradio/06.md"}'),i={name:"markdown/python/framework/gradio/06.md"};function n(o,t,l,h,p,k){return e(),a("div",null,t[0]||(t[0]=[s(`<h1 id="六、其他" tabindex="-1">六、其他 <a class="header-anchor" href="#六、其他" aria-label="Permalink to &quot;六、其他&quot;">​</a></h1><h2 id="_6-1-表格参数" tabindex="-1">6.1 表格参数 <a class="header-anchor" href="#_6-1-表格参数" aria-label="Permalink to &quot;6.1 表格参数&quot;">​</a></h2><p>Interface是Gradio的主要高级类，它允许你通过几行代码为一个机器学习模型（或任何Python函数）创建一个基于Web的图形用户界面（GUI）或演示。使用Interface时，你必须指定三个参数：</p><ul><li><p>函数：为其创建GUI的函数。这通常是你的机器学习模型或任何你想要用户与之交互的Python函数。</p></li><li><p>输入组件：你希望用户提供的输入类型。这些可以是文本框、文件上传器、滑块、单选按钮等，具体取决于你的函数需要的输入类型。</p></li><li><p>输出组件：你希望展示给用户的输出类型。这可能包括文本、图像、音频或视频等，取决于函数返回的内容。</p></li></ul><p>除了这些基本参数外，你还可以使用其他附加参数来控制演示的外观和行为。例如，你可以设置标题、描述、布局等，以及控制组件的样式和交互方式。</p><p>Interface类简化了创建交互式Web应用程序的过程，使得即使不具备前端开发经验的人也能快速构建出功能丰富的界面。此外，由于Gradio是基于Python的，因此你可以利用Python的强大功能和丰富的机器学习库来构建你的模型，并通过Gradio将其呈现给广大用户。</p><h3 id="_6-1-1-实用属性" tabindex="-1">6.1.1 实用属性 <a class="header-anchor" href="#_6-1-1-实用属性" aria-label="Permalink to &quot;6.1.1 实用属性&quot;">​</a></h3><p>Interface类提供了多种属性，如layout用于改变输入输出组件的布局，theme用于改变界面主题风格等。</p><table tabindex="0"><thead><tr><th>参数名称</th><th>说明</th><th>描述</th></tr></thead><tbody><tr><td>fn（必须要有的）</td><td>fn这一参数是这个Interface要执行的函数，可以认为将输入的数据丢入fn，fn给出对应结果。</td><td>函数的每个参数对应一个输入组件，并且该函数应返回一个单一值或值的元组，其中元组中的每个元素对应一个输出组件。（输入输出组件与函数参数一一对应）</td></tr><tr><td>inputs（必须要有的）</td><td>单一的组件、组件列表、None</td><td>组件可以是实例化对象传递，也可以通过其字符串快捷方式引用。输入组件的数量应与fn的参数数量匹配。如果设置为None，则只显示输出组件。</td></tr><tr><td>outputs （必须要有的）</td><td>单一的组件、组件列表、None</td><td>组件可以是实例化对象传递，也可以通过其字符串快捷方式引用。输出组件的数量应与fn的参数数量匹配。如果设置为None，则只显示输入组件。</td></tr><tr><td>examples</td><td>default:None</td><td>函数的示例输入，有两点注意： <br> 1.为嵌套列表时其中外部列表由示例组成，每个内部列表由对应于每个输入组件的输入组成。<br> 2.若提供示例目录的字符串路径，应在运行 gradio 应用程序的 python 文件所在的目录中。如果有多个输入组件并提供了一个目录，则必须在目录中提供 log.csv 文件以链接对应的输入。</td></tr><tr><td>cache_examples</td><td>default:None</td><td>缓存示例可加速运行时，适用于HuggingFace Spaces时默认开启。若函数为生成器，则使用最后生成的值作为输出。其他环境默认关闭缓存。</td></tr><tr><td>examples_per_page</td><td>default:10</td><td>每页展示多少个示例</td></tr><tr><td>live</td><td>default:False</td><td>如果任何输入发生改变，界面是否应该自动重新运行。</td></tr><tr><td>title</td><td>default:None</td><td>接口的标题；如果提供，则以大字体显示在输入和输出组件的上方。在浏览器窗口中打开时，也用作选项卡标题。</td></tr><tr><td>description</td><td>default:None</td><td>接口的描述；如果提供，则出现在输入和输出组件的上方，在标题的下方，以常规字体显示。</td></tr><tr><td>article</td><td>default:None</td><td>解释界面的扩展文章；如果提供，以常规字体出现在输入和输出组件的下方。接受 Markdown 和 HTML 内容。如果是一个可下载远程文件的 HTTP(S) 链接，则显示该文件的内容。</td></tr><tr><td>thumbnail</td><td>default:None</td><td>缩略图，当在社交媒体上分享Web演示时，用于显示图像的字符串路径或URL。</td></tr><tr><td>theme</td><td>default:None</td><td>Theme对象或字符串表示一个主题。如果是一个字符串，将寻找一个内置的主题与该名称(例如“soft”或“default”)，或将尝试加载一个主题从Hugging Face Hub(例如“gradio/monochrome”)。如果没有，将使用默认主题。</td></tr><tr><td>css</td><td>default:None</td><td>自定义css作为一个字符串或css文件的路径。这个css将包括在演示网页中。</td></tr><tr><td>js</td><td>default:None</td><td>自定义js或js文件路径，在demo第一次加载时运行。这个javascript将包含在demo网页中。</td></tr><tr><td>allow_flagging</td><td>default:None（默认为manual）</td><td>三个取值：“never”，“auto&quot;或&quot;manual”。用于选取标记输入输出 <br> never:永远不会被标记； <br> auto:自动标记； <br> manual:点击标记按钮进行标记</td></tr><tr><td>flagging_options</td><td>default: None</td><td>仅在manual时使用 <br> 如果提供，允许用户在标记时从选项列表中进行选择。可以是形式(label, value)的元组列表，其中label是将显示在按钮上的字符串，value是将存储在标记CSV中的字符串；或者它可以是一个字符串列表[“X”， “Y”]，在这种情况下，值将是字符串列表，标签将是[“Flag as X”， “Flag as Y”]，等等。</td></tr><tr><td>flagging_dir</td><td>default:flagged</td><td>如何命名存储标记数据的目录。</td></tr><tr><td>flagging_callback</td><td>default:flagged</td><td>当样本被标记时，将调用FlaggingCallback的子类实例。如果设置为None，将创建一个gradio.flagging.CSVLogger实例，日志将保存到flagging_dir中的本地CSV文件。默认为None。</td></tr><tr><td>head</td><td>default: None</td><td>自定义html插入到演示网页的头部。这可以用来添加自定义元标签，脚本，样式表等到页面。</td></tr></tbody></table><h3 id="_6-1-2-包含属性" tabindex="-1">6.1.2 包含属性 <a class="header-anchor" href="#_6-1-2-包含属性" aria-label="Permalink to &quot;6.1.2 包含属性&quot;">​</a></h3><p>Interface.launch 启动函数</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gradio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text[::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gr.Interface(reverse, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo.launch(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">share</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">auth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数名</th><th>数据类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>inline</td><td>bool/None</td><td>None</td><td>是否在界面中以内联的方式显示。在Python笔记本中默认为True，其他情况下默认为False。</td></tr><tr><td>inbrowser</td><td>bool</td><td>FALSE</td><td>是否自动在默认浏览器的新标签页中打开界面。</td></tr><tr><td>share</td><td>bool/None</td><td>None</td><td>是否创建一个公共链接，使演示可以被任何人访问。如果未提供，默认为False，除非在Google Colab中运行。</td></tr><tr><td>debug</td><td>bool</td><td>FALSE</td><td>如果为True，在Google Colab中需要打印错误时会阻塞主线程。</td></tr><tr><td>enable_queue</td><td>bool/None</td><td>None</td><td>【已弃用】是否启用队列来处理推理请求，用于防止超时。在HuggingFace Spaces中默认为True，在其他情况下默认为False。</td></tr><tr><td>max_threads</td><td>int</td><td>40</td><td>并行生成的线程的最大数量。默认继承自starlette库（当前为40）。无论队列是否启用，都适用。但如果启用了队列，该参数将增加到至少队列的并发数。</td></tr><tr><td>auth</td><td>Callable/tuple/…</td><td>None</td><td>如果提供，需要用户名和密码（或用户名-密码元组的列表）来访问界面。还可以提供一个函数，该函数接受用户名和密码并返回True表示有效登录。</td></tr><tr><td>auth_message</td><td>str/None</td><td>None</td><td>如果提供，将在登录页面上显示的HTML消息。</td></tr><tr><td>prevent_thread_lock</td><td>bool</td><td>FALSE</td><td>如果为True，界面将在服务器运行时阻塞主线程。</td></tr><tr><td>show_error</td><td>bool</td><td>FALSE</td><td>如果为True，在界面中显示任何错误，并将其打印到浏览器的控制台日志中。</td></tr><tr><td>server_name</td><td>str/None</td><td>None</td><td>如果设置为&quot;0.0.0.0&quot;，可以使应用在本地网络上可访问。可以通过环境变量GRADIO_SERVER_NAME进行设置。如果为None，则使用&quot;127.0.0.1&quot;。</td></tr><tr><td>server_port</td><td>int/None</td><td>None</td><td>将在该端口上启动Gradio应用程序（如果可用）。可以通过环境变量GRADIO_SERVER_PORT进行设置。如果为None，则从7860开始搜索可用端口。</td></tr><tr><td>show_tips</td><td>bool</td><td>FALSE</td><td>如果为True，将偶尔显示有关Gradio新功能的提示。</td></tr><tr><td>height</td><td>int</td><td>500</td><td>包含界面的iframe元素的高度（如果inline=True时使用）。</td></tr><tr><td>width</td><td>int/str</td><td>“100%”</td><td>包含界面的iframe元素的宽度（如果inline=True时使用）。</td></tr><tr><td>encrypt</td><td>bool/None</td><td>None</td><td>【已弃用】。无效果。</td></tr><tr><td>favicon_path</td><td>str/None</td><td>None</td><td>如果提供文件的路径（.png、.gif或.ico），将用作Web页面的favicon（网站图标）。</td></tr><tr><td>ssl_keyfile</td><td>str/None</td><td>None</td><td>如果提供文件的路径，将用作创建运行在https上的本地服务器的私钥文件。</td></tr><tr><td>ssl_certfile</td><td>str/None</td><td>None</td><td>如果提供文件的路径，将用作https的已签名证书。如果提供了ssl_keyfile，需要提供ssl_certfile。</td></tr><tr><td>ssl_keyfile_password</td><td>str/None</td><td>None</td><td>如果提供密码，将与https的SSL证书一起使用。</td></tr><tr><td>ssl_verify</td><td>bool</td><td>TRUE</td><td>如果为False，则跳过证书验证，允许使用自签名证书。</td></tr><tr><td>quiet</td><td>bool</td><td>FALSE</td><td>如果为True，则抑制大部分打印语句。</td></tr><tr><td>show_api</td><td>bool</td><td>TRUE</td><td>如果为True，在应用程序的页脚中显示API文档。默认为True。如果启用了队列，则api_open参数的值将决定是否显示API文档，与show_api参数的值无关。</td></tr><tr><td>file_directories</td><td>list[str]/None</td><td>None</td><td>【已重命名为allowed_paths】可以访问的文件路径列表。将在将来的版本中删除。</td></tr><tr><td>allowed_paths</td><td>list[str]/None</td><td>None</td><td>允许Gradio访问的完整文件路径或父目录列表（除了包含Gradio Python文件的目录）。必须是绝对路径。警告：如果提供目录，则这些目录及其子目录中的所有文件都可供应用程序的所有用户访问。</td></tr><tr><td>blocked_paths</td><td>list[str]/None</td><td>None</td><td>不允许Gradio访问的完整文件路径或父目录列表（即应用程序的用户不允许访问的路径）。必须是绝对路径。警告：优先于allowed_paths和Gradio默认公开的所有其他目录。</td></tr><tr><td>root_path</td><td>str</td><td>“”</td><td>应用程序的根路径（或&quot;mount point&quot;），如果应用程序不是从域的根目录(“/”)提供的。通常在应用程序位于转发请求的反向代理后面时使用。例如，如果应用程序在<code>https://example.com/myapp</code>提供，则root_path应设置为&quot;/myapp&quot;。LinkTo</td></tr><tr><td>app_kwargs</td><td>dict[str, Any]/None</td><td>None</td><td>作为参数键和参数值的字典，将附加给底层的FastAPI应用程序。例如，{“docs_url”: “/docs”}。</td></tr></tbody></table><h2 id="_6-2-错误记录" tabindex="-1">6.2 错误记录 <a class="header-anchor" href="#_6-2-错误记录" aria-label="Permalink to &quot;6.2 错误记录&quot;">​</a></h2><ol><li>错误1：<code>Please set share=True or check your proxy settings to allow access to localh</code></li></ol><p><img src="`+r+'" alt=""></p><p>原因：gradio获取了新版本的数据，但是网络不支持下载所有的数据</p><p>解决方式，连上外部网络进行下载，再使用受限制的网络</p>',18)]))}const c=d(i,[["render",n]]);export{g as __pageData,c as default};
